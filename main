#include <stdio.h>
#include <stdlib.h> /* abs */
#include <conio.h>  /*clrscr*/
#include <string>
#include <string.h>
#include <iostream>
#include <vector>
#include <math.h>


using namespace std;

// BLACK NORM

int whites_turn = 1;

vector<char> init_board(int is_white)
{
    if (is_white)
    {
        char row_type_1[8] = {'W', ' ', 'W', ' ', 'W', ' ', 'W', ' '};
        char row_type_2[8] = {' ', 'W', ' ', 'W', ' ', 'W', ' ', 'W'};
        // char row_type_3[8] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
        vector<char> board(64, ' ');

        for (int i = 0; i < 8; i++)
        {
            board[i] = row_type_1[i];
            board[i + 8] = row_type_2[i];
            board[i + 16] = row_type_1[i];
        }

        return board;
    }
    else
    {
        char row_type_1[8] = {'B', ' ', 'B', ' ', 'B', ' ', 'B', ' '};
        char row_type_2[8] = {' ', 'B', ' ', 'B', ' ', 'B', ' ', 'B'};
        // char row_type_3[8] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
        vector<char> board(64, ' ');

        for (int i = 0; i < 8; i++)
        {
            board[64 - 24 + i] = row_type_2[i];
            board[64 - 16 + i] = row_type_1[i];
            board[64 - 8 + i] = row_type_2[i];
        }

        return board;
    }
}

void render_board(vector<char> checkerboard_black, vector<char> checkerboard_white, vector<char> checkerboard_kings)
{

    // printf("\033c");

    vector<char> checkerboard(64, ' ');
    for (int i = 0; i < 64; i++)
    {
        if (checkerboard_black[i] != ' ')
        {
            checkerboard[i] = checkerboard_black[i];
        }
    }

    for (int i = 0; i < 64; i++)
    {
        if (checkerboard_white[i] != ' ')
        {
            checkerboard[i] = checkerboard_white[i];
        }
    }

    string printed_vec;

    printed_vec += "\n   |  ";
    for (int i = 0; i < 8; i++)
    {
        printed_vec += " ";
        printed_vec += "  |  ";
    }

    printed_vec += "\n   |  ";
    for (int i = 0; i < 8; i++)
    {
        printed_vec += char(i + 49);
        string line = "  |  ";
        printed_vec += line;
    }

    string line = ("\n-----------------------------------------------------");
    printed_vec += line;


    for (int i = 0; i < 8; i++)
    {
        printed_vec += "\n   |  ";
        for (int j = 0; j < 8; j++)
        {
            printed_vec += " ";
            string line = "  |  ";
            printed_vec += line;
        }

        printed_vec = printed_vec + "\n" + " " + char(65 + i) + " |  ";

        for (int j = 0; j < 8; j++)
        {
            char symbol = '-';

            if (checkerboard_kings[i * 8 + j] != ' ')
            {
                symbol = 'o';
            }

            if (checkerboard[i * 8 + j] != ' ')
            {
                printed_vec[printed_vec.length() - 1] = symbol;
                printed_vec += checkerboard[i * 8 + j];
            }
            else
            {
                printed_vec += " ";
            }
            string line = "  |  ";
            printed_vec += line;

            if (checkerboard[i * 8 + j] != ' ')
            {
                printed_vec[printed_vec.length() - 5] = symbol;
                printed_vec[printed_vec.length() - (61)] = symbol;
            }
        }

        printed_vec += "\n   |  ";
        for (int j = 0; j < 8; j++)
        {
            printed_vec += " ";
            string line = "  |  ";
            printed_vec += line;

            char symbol = '-';

            if (checkerboard_kings[i * 8 + j] != ' ')
            {
                symbol = 'o';
            }

            if (checkerboard[i * 8 + j] != ' ')
            {
                printed_vec[printed_vec.length() - 6] = symbol;
            }
        }

        line = ("\n------------------------------------------------------");
        printed_vec += line;
    }

    printed_vec + "\n";

    cout << printed_vec;
}

/*
printf("|  ");
        for (int j = 0; j < 8; j++) {
            cout << " ";
            if (cout << checkerboard[i * 8 + j] == 'B' || cout << checkerboard[i * 8 + j] == 'W')

            } else {

            }
            cout << "  |  ";
        }
        printf("\n|  ");
        for (int j = 0; j < 8; j++) {
            cout << checkerboard[i * 8 + j];
            cout << "  |  ";
        }
        printf("\n|  ");
        for (int j = 0; j < 8; j++) {
            cout << " ";
            cout << "  |  ";
        }
*/

int AI(bool is_white, vector<char> checkerboard_black, vector<char> checkerboard_white, vector<char> checkerboard_kings) { // returns the pos, in an in int, of Ai's move
    vector<char> combos;
    for (int i = 0; i < 100; i++ ) {
        for (int j = 0; j < 20; j++) {

        }
    }
}

int str_pos_to_pos(string str_pos, vector<char> checkerboard_black, vector<char> checkerboard_white)
{
    int str_row = tolower(str_pos[0]) - 97;
    int str_column = (str_pos[2]) - 49;
    if (str_pos.length() > 3)
    {
        cout << "C";
        return -1;
    }
    if (str_row > 8 || str_row < 0)
    {
        cout << "I";
        return -1;
    }
    if (str_column > 8 || str_column < 0)
    {
        cout << "O";
        return -1;
    }

    int row = (str_row)*8;
    int column = str_column;
    return row + column;
}

bool can_jump(bool is_white, int start_pos, int target_pos, vector<char>& checkerboard_black, vector<char>& checkerboard_white, vector<char>& checkerboard_kings)
{

    vector<char> *users_board;
    vector<char> *enemy_board;

    char en_char;

    if (is_white)
    {
        users_board = &checkerboard_white;
        enemy_board = &checkerboard_black;
        en_char = 'B';
    }
    else
    {
        users_board = &checkerboard_black;
        enemy_board = &checkerboard_white;
        en_char = 'W';
    }

    int start_row = (start_pos % 8);
    int start_col = floor(start_pos / 8);
    int targ_row = (target_pos % 8);
    int targ_col = floor(target_pos / 8);

    int row_diff = (start_row - targ_row);
    int col_diff = (start_col - targ_col);

    if (abs(row_diff) > 2 || abs(col_diff) > 2)
    {
        return false;
    }

    int row_s = (row_diff / abs(row_diff));
    int col_s = (col_diff / abs(col_diff));

    if (is_white && checkerboard_kings[start_pos] == ' ') {
        row_s = 1;
    } else if (!is_white && checkerboard_kings[start_pos] == ' ') {
        row_s = -1;
    }

    // cout << start_pos;
    //cout << (start_pos + (row_s * 8) + (col_s * 1)) << "\n";

    
    if ((*enemy_board)[start_pos + (row_s * 8) + (col_s * 1)] == en_char && (*users_board)[target_pos] == ' ' && (*enemy_board)[target_pos] == ' ')
    {
        (checkerboard_kings)[start_pos + (row_s * 8) + (col_s * 1)] = ' ';
        (*enemy_board)[start_pos + (row_s * 8) + (col_s * 1)] = ' ';
        return true;
    }

    return false; // default
}

bool is_move_blocked(int start_pos, bool is_white, vector<char> checkerboard_white, vector<char> checkerboard_black, vector<char> checkerboard_kings) { // checks to make sure that there is an open space for the piece to move to

    vector<char> checkerboard(64, ' ');

    for (int i = 0; i < 64; i++)
    {
        if (checkerboard_black[i] != ' ')
        {
            checkerboard[i] = checkerboard_black[i];
        }
    }

    for (int i = 0; i < 64; i++)
    {
        if (checkerboard_white[i] != ' ')
        {
            checkerboard[i] = checkerboard_white[i];
        }
    }

    char users_char;

    int m = 0; // modifier

    int s;
    if (is_white) {
        users_char = 'W';
        s = 1;
    } else {
        users_char = 'B';
        s = -1;
    }

    int i = 1;
    for (i = 1; i < 3; ++i) {
        m = s * i;
        cout << "I: " << i << "\n";
        cout << "M: " << m << "\n";
        if (checkerboard[start_pos] == users_char) {
            if (checkerboard[start_pos + (i * m * 8) + 1*i] == ' ' || checkerboard[start_pos + (i * m * 8) - 1*i] == ' ') {
                return false;
            }
        }
        if (checkerboard_kings[start_pos] == users_char) {
            if (checkerboard[start_pos + (-1 * 8 * i) + 1*i] == ' ' || checkerboard[start_pos + (1 * 8 * i) - 1*i] == ' ') {
                return false;
            }
        }
        if (checkerboard_kings[start_pos] == users_char) {
            if (checkerboard[start_pos + (-1 * 8 * i) + 1*i] == ' ' || checkerboard[start_pos + (1 * 8 * i) - 1*i] == ' ') {
                return false;
            }
        }
    }
    
    return true;
}

void turn_request(bool is_white, vector<char>& checkerboard_black, vector<char>& checkerboard_white, vector<char>& checkerboard_kings)
{
    vector<char> *users_board;
    vector<char> *enemy_board;

    string color_name; // i.e. "Black"

    char user_char;

    if (is_white)
    {
        users_board = &checkerboard_white;
        enemy_board = &checkerboard_black;
        color_name = "White";
        char user_char = 'W';
    }
    else
    {
        users_board = &checkerboard_black;
        enemy_board = &checkerboard_white;
        color_name = "Black";
        char user_char = 'B';
    }

    vector<char> checkerboard(64, ' ');

    for (int i = 0; i < 64; i++)
    {
        if (checkerboard_black[i] != ' ')
        {
            checkerboard[i] = checkerboard_black[i];
        }
    }

    for (int i = 0; i < 64; i++)
    {
        if (checkerboard_white[i] != ' ')
        {
            checkerboard[i] = checkerboard_white[i];
        }
    }

    cout << "\n"
         << color_name << "'s turn:\nSelect a position to move on the board [I.E. A,1]\n\n";

    int start_pos = -1;

    string str_pos;

    while (start_pos == -1)
    {
        cin >> str_pos;
        cout << "\n";
        start_pos = str_pos_to_pos(str_pos, checkerboard_black, checkerboard_white);

        if (is_move_blocked(start_pos, is_white, checkerboard_white, checkerboard_black, checkerboard_kings)) {

            start_pos = -1;

        }

        if ((*users_board)[start_pos] == ' ') {
            start_pos = -1;
        }

        if (start_pos == -1)
        {
            cout << "Position is invalid. Select a different position. \n";
        }
    }

    int target_pos = -1;

    while (target_pos == -1)
    {
        cout << "Where would you like to move it to to? [I.E. A,1]\n\n";
        cin >> str_pos;
        cout << "\n";

        target_pos = str_pos_to_pos(str_pos, checkerboard_black, checkerboard_white);

        int start_pos_row = floor(start_pos / 8);
        int start_pos_column = (start_pos % 8);
        int target_pos_row = floor(target_pos / 8);
        int target_pos_column = (target_pos % 8);

        int row_diff = abs((start_pos_row - target_pos_row));
        int col_diff = abs((start_pos_column - target_pos_column));

        int targ_row_diff;
        if (is_white) {
            targ_row_diff = -1;
        } else {
            targ_row_diff = 1;
        }

        int a;
        if (is_white && (*users_board)[start_pos] == 'B')
        {
            target_pos = -1;
        }
        else if (!is_white && (*users_board)[start_pos] == 'W')
        {
            target_pos = -1;
        }

        if (col_diff != row_diff || checkerboard[target_pos] != ' ' || (!can_jump(is_white, start_pos, target_pos, checkerboard_black, checkerboard_white, checkerboard_kings) && (col_diff > 1 && col_diff > 1)))
        {
            cout << (col_diff != row_diff) << "\n";
            cout << (checkerboard[target_pos] != ' ') << "\n";
            cout << ((!can_jump(is_white, start_pos, target_pos, checkerboard_black, checkerboard_white, checkerboard_kings) && (col_diff > 1 && col_diff > 1))) << "\n";

            target_pos = -1;
        }

        /*if ((start_pos_row - target_pos_row) != targ_row_diff && checkerboard_kings[start_pos] != user_char) {
            target_pos = -1;
            cout << "A";
        }*/

        if (target_pos == -1 || (*users_board)[start_pos] == ' ')
        {
            cout << "Position is invalid.\n";
        }

        if (checkerboard_black[target_pos] != ' ' && checkerboard_white[target_pos] != ' ')
        {
            cout << target_pos;
            cout << "Position is taken.\n";
            target_pos = -1;
        }

        if (checkerboard_black[target_pos] == ' ' && checkerboard_white[target_pos] == ' ' && target_pos != -1)
        {
            if (is_white && target_pos_row == 7) {
                checkerboard_kings[target_pos] = 'W';
            } else if (!is_white && target_pos_row == 0) {
                checkerboard_kings[target_pos] = 'B';
            }

            if (checkerboard_kings[start_pos] == user_char) {
                checkerboard_kings[target_pos] = user_char;
                checkerboard_kings[start_pos] = ' ';
            }

            (*users_board)[target_pos] = (*users_board)[start_pos];
            (*users_board)[start_pos] = ' ';
        }
    }

    whites_turn = !whites_turn;
}

int main(int argc, char const *argv[])
{
    vector<char> checkerboard_white = init_board(1);
    vector<char> checkerboard_black = init_board(0);
    vector<char> checkerboard_kings(64, ' ');

    render_board(checkerboard_black, checkerboard_white, checkerboard_kings);

    /*char answer;
    cout << "\n\nWould you like to see the rules? [Y/N]";
    cin >> answer;
    if (answer == 'Y') {
        cout << "rules\n";
    }*/

    while (1)
    {
        if (whites_turn)
        {
            turn_request(true, checkerboard_black, checkerboard_white, checkerboard_kings);
        }
        else
        {
            turn_request(false, checkerboard_black, checkerboard_white, checkerboard_kings);
        }

        render_board(checkerboard_black, checkerboard_white, checkerboard_kings);
    }
}
